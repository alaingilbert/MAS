#!/usr/bin/env python

# darwin, freebsd, linux, windows
# 386, amd64, (linux) arm
# cd /usr/local/go/src
# sudo GOOS=windows GOARCH=386 CGO_ENABLED=0 ./make.bash --no-clean


import os
import subprocess
import json
import errno
import shutil
import zipfile


def main():
  #try:
  #  os.makedirs("releases/")
  #except OSError as exc: # Python >2.5
  #  if exc.errno == errno.EEXIST and os.path.isdir(path):
  #    pass
  #  else: raise

  label = subprocess.check_output(["git", "rev-parse", "HEAD"])
  #print label

  package_data = load_package_json()
  version_path = "./releases/%s" % package_data["version"]
  if os.path.exists(version_path):
    print "Version already exists"
    return

  shutil.copytree("./public", "%s/public" % version_path)

  for goos in ["darwin", "linux", "windows"]:
    for goarch in ["386", "amd64"]:

      file_name = "app"
      if goos == "windows":
          file_name += ".exe"

      returncode = subprocess.call("GOOS=%s GOARCH=%s go build -o %s/%s/%s/%s ./app.go"
          % (goos, goarch, version_path, goos, goarch, file_name)
          , shell=True)

      with zipfile.ZipFile("%s/%s/%s/%s_%s.zip" % (version_path, goos, goarch, goos, goarch), "w") as f:
        for root, dirs, files in os.walk("./public/"):
          for file in files:
            f.write(os.path.join(root, file))
        f.write("%s/%s/%s/%s" % (version_path, goos, goarch, file_name), file_name)

      if returncode == 0:
          print "%s %s Ok" % (goos, goarch)
      else:
          print "%s %s Fail" % (goos, goarch)


def load_package_json():
  with open("./package.json") as f:
    data = json.load(f)
  return data


if __name__ == "__main__":
  main()
